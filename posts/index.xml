<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on FlyaiF&#39;s Blog</title>
		<link>https://blog.flyaif.com/posts/</link>
		<description>Recent content in Posts on FlyaiF&#39;s Blog</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-CN</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Wed, 29 Apr 2020 11:25:40 +0800</lastBuildDate>
		<atom:link href="https://blog.flyaif.com/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>New Post</title>
			<link>https://blog.flyaif.com/posts/new-post/</link>
			<pubDate>Wed, 29 Apr 2020 11:25:40 +0800</pubDate>
			
			<guid>https://blog.flyaif.com/posts/new-post/</guid>
			<description></description>
			<content type="html"><![CDATA[]]></content>
		</item>
		
		<item>
			<title>使用 expect 和 scp 分发文件给其他主机</title>
			<link>https://blog.flyaif.com/posts/use-expect-to-distribute-file-between-hosts/</link>
			<pubDate>Fri, 20 Mar 2020 16:50:58 +0800</pubDate>
			
			<guid>https://blog.flyaif.com/posts/use-expect-to-distribute-file-between-hosts/</guid>
			<description>由于要将一个 jar 包拷贝到集群的每个主机上，又要经常改改代码再测试。于是找到了使用 expect 模拟交互，使用 scp 将文件拷贝到一个列表中的所有主机上。
什么是 expect  expect - programmed dialogue with interactive programs, Version 5
 expect 是一个可以编程的，和其他程序交互的程序。根据编写的脚本，expect 可以和其他程序交互，并且对响应作出反应。
什么时候使用 expect 在使用 passwd 为用户修改密码的时候，会要求我们输入密码，这个时候 passwd 会 hang 等待我们输入密码，对于在自动化的场景中，假设我们想预先设置这个值，有什么办法呢？
对于这种情况，passwd 提供了一个 &amp;ndash;stdin 的选项，可以用管道符从标准输入提供一个密码，例：
echo myPassword | passwd myUser --stdin
但是有些命令没有提供这样的选项，我们可以使用 expect 来代替我们进行交互。
简单使用 expect 底层是基于 Tcl (Tool Command Line) 的，所以 expect 的语法与 Tcl 一致。
常用命令   spawn
运行一个脚本或者程序。
example: spawn scp file user@host:path
  expect</description>
			<content type="html"><![CDATA[<p>由于要将一个 jar 包拷贝到集群的每个主机上，又要经常改改代码再测试。于是找到了使用 expect 模拟交互，使用 scp 将文件拷贝到一个列表中的所有主机上。</p>
<h3 id="什么是-expect">什么是 expect</h3>
<blockquote>
<p>expect - programmed dialogue with interactive programs, Version 5</p>
</blockquote>
<p>expect 是一个可以编程的，和其他程序交互的程序。根据编写的脚本，expect 可以和其他程序交互，并且对响应作出反应。</p>
<h3 id="什么时候使用-expect">什么时候使用 expect</h3>
<p>在使用 passwd 为用户修改密码的时候，会要求我们输入密码，这个时候 passwd 会 hang 等待我们输入密码，对于在自动化的场景中，假设我们想预先设置这个值，有什么办法呢？</p>
<p>对于这种情况，passwd 提供了一个 &ndash;stdin 的选项，可以用管道符从标准输入提供一个密码，例：</p>
<p><code>echo myPassword | passwd myUser --stdin</code></p>
<p>但是有些命令没有提供这样的选项，我们可以使用 expect 来代替我们进行交互。</p>
<h3 id="简单使用">简单使用</h3>
<p>expect 底层是基于 <a href="https://en.wikipedia.org/wiki/Tcl">Tcl</a> (Tool Command Line) 的，所以 expect 的语法与 Tcl 一致。</p>
<h4 id="常用命令">常用命令</h4>
<ul>
<li>
<p>spawn</p>
<p>运行一个脚本或者程序。</p>
<p>example: <code>spawn scp file user@host:path</code></p>
</li>
<li>
<p>expect</p>
<p>等待程序输出。</p>
<p>example: <code>expect &quot;yes&quot; # 表示等待输出包含 yes</code></p>
</li>
<li>
<p>send</p>
<p>给程序输入，类似手动输入数据.</p>
<p>example: <code>send &quot;myPassword\r&quot;</code></p>
<p>表示输入 myPassword 并模拟输入回车键。</p>
</li>
<li>
<p>interact</p>
<p>进入交互模式，将控制权交还给用户。</p>
</li>
</ul>
<h4 id="使用-expect-替我们输入-scp-的密码">使用 expect 替我们输入 scp 的密码</h4>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="cp">#!/usr/bin/expect
</span><span class="cp"></span>
<span class="c1"># 预设变量</span>
<span class="nb">set</span> timeout <span class="m">3600</span>
<span class="nb">set</span> host 192.168.1.2
<span class="nb">set</span> port <span class="m">22</span>
<span class="nb">set</span> username user
<span class="nb">set</span> password pass
<span class="nb">set</span> src_file /tmp/src.file
<span class="nb">set</span> dest_file /tmp/dest.file

<span class="c1"># 执行 scp 命令</span>
spawn scp -P <span class="si">${</span><span class="nv">port</span><span class="si">}</span> <span class="si">${</span><span class="nv">src_file</span><span class="si">}</span> <span class="si">${</span><span class="nv">username</span><span class="si">}</span>@<span class="si">${</span><span class="nv">host</span><span class="si">}</span>:<span class="si">${</span><span class="nv">dest_file</span><span class="si">}</span>

expect <span class="o">{</span>
	<span class="c1"># 接受密钥认证</span>
	<span class="s2">&#34;(yes/no)?&#34;</span> <span class="o">{</span>
		send <span class="s2">&#34;yes\r&#34;</span>
		expect <span class="s2">&#34;*assord:&#34;</span> <span class="o">{</span> send <span class="s2">&#34;</span><span class="si">${</span><span class="nv">password</span><span class="si">}</span><span class="s2">\r&#34;</span><span class="o">}</span>
	<span class="o">}</span>
	<span class="c1"># 输入密码</span>
	<span class="s2">&#34;*assword:&#34;</span> <span class="o">{</span>
		send <span class="s2">&#34;</span><span class="si">${</span><span class="nv">password</span><span class="si">}</span><span class="s2">\r&#34;</span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="c1"># 等待传输完成</span>
expect <span class="s2">&#34;100%&#34;</span>
expect eof
</code></pre></div><p>这样，我们可以使用这个脚本替我们自动将文件传递到目标主机。类似的，我们可以编写 shell 脚本，将指定文件发送给特定主机列表。</p>
<p>当然， expect 还有完备的流程控制等许多强大功能，不过简单使用的话了解超时设置，判断待执行程序输出，自动输入就够了。</p>
<blockquote>
<p><a href="https://linux.die.net/man/1/expect">expect(1) - Linux man page</a></p>
<p><a href="https://likegeeks.com/expect-command">Expect command and how to automate shell scripts like magic</a></p>
<p><a href="https://blog.csdn.net/catoop/article/details/48301251">Linux 利用 expect 进行 scp 自动同步文件</a></p>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>Java API 从 GridFS 中下载文件</title>
			<link>https://blog.flyaif.com/posts/gridfs-file-download/</link>
			<pubDate>Sun, 14 Jul 2019 17:20:04 +0800</pubDate>
			
			<guid>https://blog.flyaif.com/posts/gridfs-file-download/</guid>
			<description>GridFS 文件下载 GridFs 简介 我们在使用MongoDB存储文件的过程中，由于单个 bson 具有大小限制，因此我们不能存储大于这个上限的文件，GridFs 将文件分为若干部分（chunk），每个部分存储为一个独立的document，GridFs 默认的 chunk size 是 255kB，也就是说它将文件按255kB等分，最后一个 chunk 是不足的部分，可能不足 255kB；如果一个文件不足一个 chunk 的大小，那么就存储在一个 chunk，这个里面包含了文件和一些元数据。
GridFs 的优点  文件的大小超出了 16M 由于单个 bson 大小的限制，因而将文件存放于 GridFs 中。 对于大文件，读取时不想将整个文件载入内存中 由于文件时存放在多个 chunk 中的，读取文件的时候可以部分载入，同时访问文件的时候可以任意跳转，直接跳过某些部分请求感兴趣的部分。例如视频、音频文件。 在多个系统间共享文件 搭建 Mongo 集群，在集群间共享文件。  文件存储结构 files collection files 这个集合里面的每一条记录代表了 GridFs 中的一个文件
{ &amp;#34;_id&amp;#34;: &amp;lt;objectId&amp;gt;, &amp;#34;length&amp;#34;: &amp;lt;num&amp;gt;, &amp;#34;chunkSize&amp;#34;: &amp;lt;num&amp;gt;, &amp;#34;uploadDate&amp;#34;: &amp;lt;timestamp&amp;gt;, &amp;#34;md5&amp;#34;: &amp;lt;hash&amp;gt;, &amp;#34;filename&amp;#34;: &amp;lt;string&amp;gt;, &amp;#34;contentType&amp;#34;: &amp;lt;string&amp;gt;, &amp;#34;aliases&amp;#34;: &amp;lt;string array&amp;gt;, &amp;#34;metadata&amp;#34;: &amp;lt;any&amp;gt;, }  files._id 文档唯一标识 files.length 文件长度 files.</description>
			<content type="html"><![CDATA[<h1 id="gridfs-文件下载">GridFS 文件下载</h1>
<h2 id="gridfs-简介">GridFs 简介</h2>
<p>我们在使用MongoDB存储文件的过程中，由于单个 bson 具有大小限制，因此我们不能存储大于这个上限的文件，<em>GridFs</em> 将文件分为若干部分（chunk），每个部分存储为一个独立的document，GridFs 默认的 chunk size 是 255kB，也就是说它将文件按255kB等分，最后一个 chunk 是不足的部分，可能不足 255kB；如果一个文件不足一个 chunk 的大小，那么就存储在一个 chunk，这个里面包含了文件和一些元数据。</p>
<h2 id="gridfs-的优点">GridFs 的优点</h2>
<ol>
<li>文件的大小超出了 16M
由于单个 bson 大小的限制，因而将文件存放于 GridFs 中。</li>
<li>对于大文件，读取时不想将整个文件载入内存中
由于文件时存放在多个 chunk 中的，读取文件的时候可以部分载入，同时访问文件的时候可以任意跳转，直接跳过某些部分请求感兴趣的部分。例如视频、音频文件。</li>
<li>在多个系统间共享文件
搭建 Mongo 集群，在集群间共享文件。</li>
</ol>
<h2 id="文件存储结构">文件存储结构</h2>
<h3 id="files-collection">files collection</h3>
<p>files 这个集合里面的每一条记录代表了 GridFs 中的一个文件</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&#34;_id&#34;</span><span class="p">:</span> <span class="err">&lt;objectId&gt;</span><span class="p">,</span>
    <span class="nt">&#34;length&#34;</span><span class="p">:</span> <span class="err">&lt;num&gt;</span><span class="p">,</span>
    <span class="nt">&#34;chunkSize&#34;</span><span class="p">:</span> <span class="err">&lt;num&gt;</span><span class="p">,</span>
    <span class="nt">&#34;uploadDate&#34;</span><span class="p">:</span> <span class="err">&lt;timestamp&gt;</span><span class="p">,</span>
    <span class="nt">&#34;md5&#34;</span><span class="p">:</span> <span class="err">&lt;hash&gt;</span><span class="p">,</span>
    <span class="nt">&#34;filename&#34;</span><span class="p">:</span> <span class="err">&lt;string&gt;</span><span class="p">,</span>
    <span class="nt">&#34;contentType&#34;</span><span class="p">:</span> <span class="err">&lt;string&gt;</span><span class="p">,</span>
    <span class="nt">&#34;aliases&#34;</span><span class="p">:</span> <span class="err">&lt;string</span> <span class="err">array&gt;</span><span class="p">,</span>
    <span class="nt">&#34;metadata&#34;</span><span class="p">:</span> <span class="err">&lt;any&gt;</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div><ul>
<li>files._id
文档唯一标识</li>
<li>files.length
文件长度</li>
<li>files.chunkSize
每个 chunk 的大小</li>
<li>files.uploadDate
文件上传时间</li>
<li>files.metadata
额外的元数据，可以存放自定义的一些标识。</li>
</ul>
<h3 id="chunks-collection">chunks collection</h3>
<p>chunk 结构</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&#34;_id&#34;</span><span class="p">:</span> <span class="err">&lt;ObjectId&gt;</span><span class="p">,</span>
    <span class="nt">&#34;files_id&#34;</span><span class="p">:</span> <span class="err">&lt;ObjectId&gt;</span><span class="p">,</span>
    <span class="nt">&#34;n&#34;</span><span class="p">:</span> <span class="err">&lt;num&gt;</span><span class="p">,</span>
    <span class="nt">&#34;data&#34;</span><span class="p">:</span> <span class="err">&lt;binary&gt;</span>
<span class="p">}</span>
</code></pre></div><ul>
<li>chunks._id
chunk 的唯一标识</li>
<li>chunks.files_id
文件的 id， 对应到 chunk 归属文件的 _id。</li>
<li>chunks.n
此 chunk 是文件的额第几个 chunk，从 0 开始。</li>
<li>chunks.data
chunk 里面的数据，以 BSON 形式存放。</li>
</ul>
<h2 id="调用-java-api-从-gridfs-下载文件">调用 Java api 从 GridFS 下载文件</h2>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">MongoClient</span> <span class="n">mongoClient</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MongoClient</span><span class="o">(</span><span class="k">new</span> <span class="n">ServerAddress</span><span class="o">(&lt;</span><span class="n">host</span><span class="o">&gt;,</span> <span class="o">&lt;</span><span class="n">port</span><span class="o">&gt;));</span>
    <span class="n">MongoDatabase</span> <span class="n">db</span> <span class="o">=</span> <span class="n">mongoClient</span><span class="o">.</span><span class="na">getDatabase</span><span class="o">(&lt;</span><span class="n">databaseName</span><span class="o">&gt;);</span>
    <span class="n">GridFSBucket</span> <span class="n">bucket</span> <span class="o">=</span> <span class="n">GridFSBucket</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">db</span><span class="o">,</span> <span class="o">&lt;</span><span class="n">bucketName</span><span class="o">&gt;);</span>
    <span class="c1">// 下载到文件中
</span><span class="c1"></span>    <span class="n">FileOutputStream</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(&lt;</span><span class="n">filename</span><span class="o">&gt;);</span>
    <span class="n">bucket</span><span class="o">.</span><span class="na">downloadToStream</span><span class="o">(</span><span class="k">new</span> <span class="n">ObjectId</span><span class="o">(&lt;</span><span class="n">id</span><span class="o">&gt;),</span> <span class="n">out</span><span class="o">);</span>
    <span class="n">out</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
    <span class="n">out</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</code></pre></div><p>从 mongo 的 GridFSBucket 中打开一个 stream 的时候要注意，如果这个文件存在于多个 chunk 中，无法一次性读取全部数据，必须
分次读取。</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">MongoClient</span> <span class="n">mongoClient</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MongoClient</span><span class="o">(</span><span class="k">new</span> <span class="n">ServerAddress</span><span class="o">(&lt;</span><span class="n">host</span><span class="o">&gt;,</span> <span class="o">&lt;</span><span class="n">port</span><span class="o">&gt;));</span>
    <span class="n">MongoDatabase</span> <span class="n">db</span> <span class="o">=</span> <span class="n">mongoClient</span><span class="o">.</span><span class="na">getDatabase</span><span class="o">(&lt;</span><span class="n">databaseName</span><span class="o">&gt;);</span>
    <span class="n">GridFSBucket</span> <span class="n">bucket</span> <span class="o">=</span> <span class="n">GridFSBucket</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">db</span><span class="o">,</span> <span class="o">&lt;</span><span class="n">bucketName</span><span class="o">&gt;);</span>
    <span class="n">GridFSDownloadStream</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">bucket</span><span class="o">.</span><span class="na">openDownloadStream</span><span class="o">(</span><span class="k">new</span> <span class="n">Object</span><span class="o">(&lt;</span><span class="n">id</span><span class="o">&gt;));</span>
    <span class="n">ByteArrayOutputStream</span> <span class="n">os</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">(</span><span class="n">stream</span><span class="o">.</span><span class="na">available</span><span class="o">());</span>
    <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">1024</span><span class="o">];</span>
    <span class="kt">int</span> <span class="n">size</span><span class="o">;</span>
    <span class="k">while</span> <span class="o">((</span><span class="n">size</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">bytes</span><span class="o">))</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">os</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">bytes</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="n">bytes</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">();</span>
    <span class="n">FileOutputStream</span> <span class="n">fos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="n">fileName</span><span class="o">);</span>
    <span class="n">fos</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">bytes</span><span class="o">);</span>
    <span class="n">stream</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="n">os</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="n">fos</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</code></pre></div><h1 id="引用">引用</h1>
<blockquote>
<p><a href="https://stackoverflow.com/questions/36175190/gridfsdownloadstream-can-not-read-all-data">GridFSDownloadStream can not read all data</a></p>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>Shell Variable</title>
			<link>https://blog.flyaif.com/posts/shell-variable/</link>
			<pubDate>Tue, 10 Jul 2018 17:29:58 +0800</pubDate>
			
			<guid>https://blog.flyaif.com/posts/shell-variable/</guid>
			<description>Shell 变量 Shell中有不少内置的变量，使用好他们可以使得我们的shell编程更加快捷，可读性也更好   $1, $2, ... $9
1到9分别表示调用shell的时候传递的变量。
cat var4.sh #!/bin/sh echo $1 $2 $3 $ ./var5.sh 1 2 3 1 2 3 ``
  $0
当前运行脚本的名字，具体取决于调用脚本的时候所使用的方式
$ cat var5.sh #!/bin/sh echo $0 $ ./var5.sh ./var5.sh $ /bin/sh var5.sh var5.sh ``
  $#
向脚本内传递的变量个数
$ cat var6.sh #!/bin/sh echo $# $ ./var6.sh 0 $ ./var6.sh 1 2 3 3 ``
  $@, $*
向脚本内传递的所有具体变量
$ cat var7.</description>
			<content type="html"><![CDATA[<h1 id="shell-变量">Shell 变量</h1>
<h3 id="shell中有不少内置的变量使用好他们可以使得我们的shell编程更加快捷可读性也更好">Shell中有不少内置的变量，使用好他们可以使得我们的shell编程更加快捷，可读性也更好</h3>
<ol>
<li>
<p><code>$1, $2, ... $9</code></p>
<p>1到9分别表示调用shell的时候传递的变量。</p>
<pre><code>cat var4.sh
#!/bin/sh
echo $1 $2 $3

$ ./var5.sh 1 2 3
1
2
3
</code></pre><p>``</p>
</li>
<li>
<p><code>$0</code></p>
<p>当前运行脚本的名字，具体取决于调用脚本的时候所使用的方式</p>
<pre><code>$ cat var5.sh 
#!/bin/sh
echo $0
   
$ ./var5.sh 	
./var5.sh
   
$ /bin/sh var5.sh 
var5.sh
</code></pre><p>``</p>
</li>
<li>
<p><code>$#</code></p>
<p>向脚本内传递的变量个数</p>
<pre><code>$ cat var6.sh
#!/bin/sh
echo $#

$ ./var6.sh 
0

$ ./var6.sh 1 2 3
3
</code></pre><p>``</p>
</li>
<li>
<p><code>$@, $*</code></p>
<p>向脚本内传递的所有具体变量</p>
<pre><code>$ cat var7.sh 
#!/bin/sh
echo $@
echo $*

$ ./var7.sh 1 2 3
1 2 3
1 2 3
</code></pre><p>``</p>
</li>
<li>
<p><code>$?</code></p>
<p>上一条命令的退出码(exit code)，一般正常指定退出的时候都为0，所以可以判断这个变量来判断上一条命令有没有执行成功</p>
<pre><code>$ cat var8.sh 
#!/bin/sh
cat ./3333  #cat一个不存在的文件
EXIT_CODE=$?
if [ $EXIT_CODE -ne 0 ]; then
  echo &quot;cat failed, exit code is $EXIT_CODE .&quot;
fi

$ ./var8.sh 
cat: ./3333: No such file or directory
cat failed, exit code is 1 .
</code></pre><p>``</p>
</li>
<li>
<p><code>$$</code></p>
<p>表示当前脚本的pid。</p>
</li>
<li>
<p><code>$!</code></p>
<p>上一个后台运行的程序的pid，一般用于长期运行于后台的任务的pid的保存，方便以后管理。</p>
</li>
</ol>
<blockquote>
<p><a href="https://www.shellscript.sh/variables2.html">Shell Scripting Tutorial - part2: Variable</a></p>
</blockquote>
<blockquote>
<p>Written with <a href="https://stackedit.io/">StackEdit</a>.</p>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>ElasticSearch 简单语法备忘</title>
			<link>https://blog.flyaif.com/posts/elastic-search-memo/</link>
			<pubDate>Thu, 03 May 2018 17:24:16 +0800</pubDate>
			
			<guid>https://blog.flyaif.com/posts/elastic-search-memo/</guid>
			<description>Elastic Search 查询备忘  使用get请求查询所有数据   GET 127.0.0.1/index/type/_search
 使用get请求根据id来查询某一条特定的数据   GET 127.0.0.1/index/type/1
 表示查询id为1的这一条数据。如果找到了返回这条数据found为true，否则found返回false
// 成功找到数据时返回的数据 { &amp;#34;_index&amp;#34;: &amp;#34;index&amp;#34;, &amp;#34;_type&amp;#34;: &amp;#34;type&amp;#34;, &amp;#34;_id&amp;#34;: &amp;#34;1&amp;#34;, &amp;#34;_version&amp;#34;: 1, &amp;#34;found&amp;#34;: true, &amp;#34;_source&amp;#34;: { &amp;#34;student_id&amp;#34;: 1, &amp;#34;last_name&amp;#34;:&amp;#34;smith&amp;#34;, &amp;#34;first_name&amp;#34;:&amp;#34;john&amp;#34;, &amp;#34;age&amp;#34;: 23 } } // 没有找到数据时的返回数据 { &amp;#34;_index&amp;#34;: &amp;#34;index&amp;#34;, &amp;#34;_type&amp;#34;: &amp;#34;type&amp;#34;, &amp;#34;_id&amp;#34;: &amp;#34;2&amp;#34;, &amp;#34;found&amp;#34;: false } 使用get请求的简单搜索   GET 127.0.0.1/index/type/_search?q=last_name:smith
 表示查询last_name为smith的数据,为精确搜索。 在ElasticSearch中这种查询称为查询字符串，如果要查询多个字段可以如下表示
 +last_name:smith+first_name:john 如果我们不指定要查询的字段而是直接向es请求一个搜索字符串会这么样呢
 GET 127.0.0.1/index/type/_search?q=smith
 这样子es会在隐含的_all字段上面查询所有匹配smith的结果,默认情况下es会将所有字段拼接成一个大的字段，分词后匹配。
使用post请求的复杂搜索   POST 127.</description>
			<content type="html"><![CDATA[<h2 id="elastic-search-查询备忘">Elastic Search 查询备忘</h2>
<ol>
<li>使用get请求查询所有数据</li>
</ol>
<blockquote>
<p>GET  127.0.0.1/index/type/_search</p>
</blockquote>
<ol start="2">
<li>使用get请求根据id来查询某一条特定的数据</li>
</ol>
<blockquote>
<p>GET  127.0.0.1/index/type/1</p>
</blockquote>
<p>表示查询id为1的这一条数据。如果找到了返回这条数据found为true，否则found返回false</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json">  <span class="err">//</span> <span class="err">成功找到数据时返回的数据</span>
    <span class="p">{</span>
      <span class="nt">&#34;_index&#34;</span><span class="p">:</span> <span class="s2">&#34;index&#34;</span><span class="p">,</span>
      <span class="nt">&#34;_type&#34;</span><span class="p">:</span> <span class="s2">&#34;type&#34;</span><span class="p">,</span>
      <span class="nt">&#34;_id&#34;</span><span class="p">:</span> <span class="s2">&#34;1&#34;</span><span class="p">,</span>
      <span class="nt">&#34;_version&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
      <span class="nt">&#34;found&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="nt">&#34;_source&#34;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&#34;student_id&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
        <span class="nt">&#34;last_name&#34;</span><span class="p">:</span><span class="s2">&#34;smith&#34;</span><span class="p">,</span>
        <span class="nt">&#34;first_name&#34;</span><span class="p">:</span><span class="s2">&#34;john&#34;</span><span class="p">,</span>
        <span class="nt">&#34;age&#34;</span><span class="p">:</span> <span class="mi">23</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="err">//</span> <span class="err">没有找到数据时的返回数据</span>
  <span class="p">{</span>
    <span class="nt">&#34;_index&#34;</span><span class="p">:</span> <span class="s2">&#34;index&#34;</span><span class="p">,</span>
    <span class="nt">&#34;_type&#34;</span><span class="p">:</span> <span class="s2">&#34;type&#34;</span><span class="p">,</span>
    <span class="nt">&#34;_id&#34;</span><span class="p">:</span> <span class="s2">&#34;2&#34;</span><span class="p">,</span>
    <span class="nt">&#34;found&#34;</span><span class="p">:</span> <span class="kc">false</span>
  <span class="p">}</span>
</code></pre></div><ol start="3">
<li>使用get请求的简单搜索</li>
</ol>
<blockquote>
<p>GET  127.0.0.1/index/type/_search?q=last_name:smith</p>
</blockquote>
<p>表示查询last_name为smith的数据,为精确搜索。
在ElasticSearch中这种查询称为查询字符串，如果要查询多个字段可以如下表示</p>
<pre><code>  +last_name:smith+first_name:john
</code></pre><p>如果我们不指定要查询的字段而是直接向es请求一个搜索字符串会这么样呢</p>
<blockquote>
<p>GET 127.0.0.1/index/type/_search?q=smith</p>
</blockquote>
<p>这样子es会在隐含的_all字段上面查询所有匹配smith的结果,默认情况下es会将所有字段拼接成一个大的字段，分词后匹配。</p>
<ol start="4">
<li>使用post请求的复杂搜索</li>
</ol>
<blockquote>
<p>POST 127.0.0.1/index/type/_search</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json">  <span class="p">{</span>
    <span class="nt">&#34;query&#34;</span><span class="p">:</span> <span class="p">{</span>
      <span class="nt">&#34;match&#34;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;smith&#34;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div><p>上面的请求表示查询last_name中包含smith的数据</p>
<p>更复杂的条件查询</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json">  <span class="p">{</span>
    <span class="nt">&#34;query&#34;</span><span class="p">:</span> <span class="p">{</span>
      <span class="nt">&#34;bool&#34;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&#34;must&#34;</span><span class="p">:[</span>
          <span class="p">{</span>
            <span class="nt">&#34;match&#34;</span><span class="p">:</span> <span class="p">{</span>
              <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;smith&#34;</span>
            <span class="p">}</span>
          <span class="p">},</span>
          <span class="p">{</span>
            <span class="nt">&#34;match&#34;</span><span class="p">:</span> <span class="p">{</span>
              <span class="nt">&#34;first_name&#34;</span><span class="p">:</span> <span class="s2">&#34;john&#34;</span>
            <span class="p">}</span>
          <span class="p">},</span>
          <span class="p">{</span>
            <span class="nt">&#34;should&#34;</span><span class="p">:</span> <span class="p">[</span>
              <span class="p">{</span>
                <span class="nt">&#34;match&#34;</span><span class="p">:</span> <span class="p">{</span>
                  <span class="nt">&#34;age&#34;</span><span class="p">:</span> <span class="mi">15</span>
                <span class="p">}</span>
              <span class="p">},</span>
              <span class="p">{</span>
                <span class="nt">&#34;match&#34;</span><span class="p">:</span> <span class="p">{</span>
                  <span class="nt">&#34;student_id&#34;</span><span class="p">:</span> <span class="mi">1</span>
                <span class="p">}</span>
              <span class="p">}</span>
            <span class="p">]</span>
          <span class="p">}</span>
        <span class="p">]</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div><p>上面的请求展示了bool这中查询中多个条件嵌套的模式，查询结果包含了last_name等于smith，first_name等于john，age为15或者student_id为1的文档。</p>
<ol start="5">
<li>一些关键字总结</li>
</ol>
<ul>
<li>
<p>match
经过分词处理的精确匹配。</p>
</li>
<li>
<p>term
表示精确查询可以处理的范围包括数字、bool类型，文本类型和日期类型，需要注意的时term表示精确匹配。</p>
</li>
<li>
<p>bool
bool过滤器，其中可以放置的过滤器分别为must, must_not, should。</p>
</li>
<li>
<p>must
must过滤器表示必须匹配，等同于AND。</p>
</li>
<li>
<p>must_not
must_not表示必须不匹配，等同于NOT。</p>
</li>
<li>
<p>should
should表示必须匹配其中一个，相当于OR。</p>
</li>
<li>
<p>sort
排序，表示按照特定的字段按照什么样的规则进行排序。</p>
</li>
</ul>
<p>example:</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json">  <span class="p">{</span>
    <span class="err">//</span> <span class="err">...</span>
    <span class="nt">&#34;sort&#34;</span><span class="p">:</span> <span class="p">{</span>
      <span class="nt">&#34;age&#34;</span><span class="p">:</span> <span class="s2">&#34;asc&#34;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="err">//表示查询结果按照age升序排序</span>
</code></pre></div><ul>
<li>_source
表示返回结果应该返回哪些字段</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json">  <span class="p">{</span>
    <span class="err">//</span> <span class="err">...</span>
    <span class="nt">&#34;_source&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;age&#34;</span><span class="p">,</span> <span class="s2">&#34;firsr_name&#34;</span><span class="p">,</span> <span class="s2">&#34;last_name&#34;</span><span class="p">]</span>
  <span class="p">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Javascript AJAX简介</title>
			<link>https://blog.flyaif.com/posts/javascript-ajax/</link>
			<pubDate>Fri, 30 Mar 2018 09:26:04 +0800</pubDate>
			
			<guid>https://blog.flyaif.com/posts/javascript-ajax/</guid>
			<description>Javascript ajax 请求 1.ajax简介
 全称：Asynchronous Javascript And Xml 普通页面刷新的时候不但从服务器获取了变化的部分，连同不变化的固定的部分也刷新了，这不变的一部分占用的网络带宽和服务器负载是没有必要的。 这种缺点可以通过异步加载来避免，1995年，随着Java第一版的发布，Java applets首次实现了异步加载，浏览器通过运行嵌入的Java applets可以在不刷新页面的情况下与服务器交换数据，随后，微软在1996年时在ie将iframe加入到HTML中，支持局部刷新网页。1998年前后，Outlook Web Access小组写成了允许客户端脚本发送HTTP请求（XMLHTTP）的第一个组件。该组件原属于微软Exchange Server，并且迅速地成为了Internet Explorer 4.0[2]的一部分。部分观察家认为，Outlook Web Access是第一个应用了Ajax技术的成功的商业应用程序，并成为包括Oddpost的网络邮件产品在内的许多产品的领头羊。 2005年出，Google在其著名交互应用使用Ajax技术使得这项技术开始流行起来。
 维基百科-Ajax
  2.ajax的优点和缺点
-优点：不更新整个页面的前提下维护数据，避免在网络上发送无用的数据。 -缺点：可能破坏浏览器后退和保存书签的功能。浏览器之间的兼容问题
3.在应用程序中使用Ajax
3.1 创建XMLHttpRequest对象
var req; if (window.ActiveXObject) { req = new ActiveXObject(&amp;#39;Microsoft.XMLHTTP&amp;#39;); } else if (window.XMLHttpRequest) { req = new XMLHttpRequest(); } 3.2 打开与服务器的链接，指定请求的url和请求方式
//基本语法：req.open(type, url, async, user, password); //type:请求类型，常用的有GET和POST //url:请求的url地址 //async:true or false,标识请求是否异步。 // 默认是异步，异步的情况下状态改变的时候会调用onreadystatechange属性指定的回调函数, // 函数是可选的。 //user，password与权限有关 req.open(&amp;#39;GET&amp;#39;, &amp;#39;/test/get&amp;#39;); req.onreadystatechange = () =&amp;gt; { if (req.</description>
			<content type="html"><![CDATA[<h1 id="javascript-ajax-请求">Javascript ajax 请求</h1>
<p>1.ajax简介</p>
<blockquote>
<p>全称：Asynchronous Javascript And Xml
普通页面刷新的时候不但从服务器获取了变化的部分，连同不变化的固定的部分也刷新了，这不变的一部分占用的网络带宽和服务器负载是没有必要的。
这种缺点可以通过异步加载来避免，1995年，随着Java第一版的发布，Java applets首次实现了异步加载，浏览器通过运行嵌入的Java applets可以在不刷新页面的情况下与服务器交换数据，随后，微软在1996年时在ie将iframe加入到HTML中，支持局部刷新网页。1998年前后，Outlook Web Access小组写成了允许客户端脚本发送HTTP请求（XMLHTTP）的第一个组件。该组件原属于微软Exchange Server，并且迅速地成为了Internet Explorer 4.0[2]的一部分。部分观察家认为，Outlook Web Access是第一个应用了Ajax技术的成功的商业应用程序，并成为包括Oddpost的网络邮件产品在内的许多产品的领头羊。
2005年出，Google在其著名交互应用使用Ajax技术使得这项技术开始流行起来。</p>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/AJAX">维基百科-Ajax</a></p>
</blockquote>
</blockquote>
<!-- raw HTML omitted -->
<p>2.ajax的优点和缺点</p>
<p>-优点：不更新整个页面的前提下维护数据，避免在网络上发送无用的数据。
-缺点：可能破坏浏览器后退和保存书签的功能。浏览器之间的兼容问题</p>
<p>3.在应用程序中使用Ajax<br>
3.1 创建XMLHttpRequest对象</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript">  <span class="kd">var</span> <span class="nx">req</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">ActiveXObject</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">req</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="s1">&#39;Microsoft.XMLHTTP&#39;</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">XMLHttpRequest</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">req</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
  <span class="p">}</span>
</code></pre></div><p>3.2 打开与服务器的链接，指定请求的url和请求方式</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">//基本语法：req.open(type, url, async, user, password);
</span><span class="c1">//type:请求类型，常用的有GET和POST  
</span><span class="c1">//url:请求的url地址
</span><span class="c1">//async:true or false,标识请求是否异步。
</span><span class="c1">//  默认是异步，异步的情况下状态改变的时候会调用onreadystatechange属性指定的回调函数,
</span><span class="c1">//  函数是可选的。
</span><span class="c1">//user，password与权限有关  
</span><span class="c1"></span><span class="nx">req</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;/test/get&#39;</span><span class="p">);</span>
<span class="nx">req</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">===</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="nx">req</span><span class="p">.</span><span class="nx">status</span> <span class="o">=</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;request error!&#39;</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">req</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</code></pre></div><p>其中，在请求发出后XMLHttpRequest对象的readyState状态会经历0-4几个状态变化</p>
<ul>
<li>0 - 请求未初始化</li>
<li>1 - 服务器连接已建立</li>
<li>2 - 请求已接收</li>
<li>3 - 请求处理中</li>
<li>4 - 请求完成，响应就绪</li>
</ul>
<p>XMLHttpRequest的status表示服务器返回的响应码，正常返回是200，常见的如404标识请求的资源没有找到。</p>
<p>3.3 处理响应
如3.2中的处理，当XMLHttpResponde的readyState为4，且响应码是200时，我们可以提取XMLHttpResponse对象的responseText或者是<br>
responseXML,取决于响应的内容，responseText表示响应是普通的文本，responseXML表示返回的是XML格式的数据。</p>
]]></content>
		</item>
		
	</channel>
</rss>
